//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from "Assets/InputSystem_Actions.inputactions"
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class InputSystem_Actions : IInputActionCollection2, System.IDisposable
{
    public InputActionAsset asset { get; }
    public InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""UI Demo"",
            ""id"": ""a4b8c9d2-3f6e-4a1b-8c7d-2e9f1a5b6c8e"",
            ""actions"": [
                {
                    ""name"": ""AddScore"",
                    ""type"": ""Button"",
                    ""id"": ""1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddCoin"",
                    ""type"": ""Button"",
                    ""id"": ""2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeDamage"",
                    ""type"": ""Button"",
                    ""id"": ""3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a6b7c8d-9e0f-1a2b-3c4d-5e6f7a8b9c0d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AddScore"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b7c8d9e-0f1a-2b3c-4d5e-6f7a8b9c0d1e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""AddCoin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c8d9e0f-1a2b-3c4d-5e6f-7a8b9c0d1e2f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""TakeDamage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d9e0f1a-2b3c-4d5e-6f7a-8b9c0d1e2f3a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI Demo
        m_UIDemo = asset.FindActionMap("UI Demo", throwIfNotFound: true);
        m_UIDemo_AddScore = m_UIDemo.FindAction("AddScore", throwIfNotFound: true);
        m_UIDemo_AddCoin = m_UIDemo.FindAction("AddCoin", throwIfNotFound: true);
        m_UIDemo_TakeDamage = m_UIDemo.FindAction("TakeDamage", throwIfNotFound: true);
        m_UIDemo_Heal = m_UIDemo.FindAction("Heal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.DestroyImmediate(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI Demo
    private readonly InputActionMap m_UIDemo;
    private IUIDemoActions m_UIDemoActionsCallbackInterface;
    private readonly InputAction m_UIDemo_AddScore;
    private readonly InputAction m_UIDemo_AddCoin;
    private readonly InputAction m_UIDemo_TakeDamage;
    private readonly InputAction m_UIDemo_Heal;
    public struct UIDemoActions
    {
        private InputSystem_Actions m_Wrapper;
        public UIDemoActions(InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddScore => m_Wrapper.m_UIDemo_AddScore;
        public InputAction @AddCoin => m_Wrapper.m_UIDemo_AddCoin;
        public InputAction @TakeDamage => m_Wrapper.m_UIDemo_TakeDamage;
        public InputAction @Heal => m_Wrapper.m_UIDemo_Heal;
        public InputActionMap Get() { return m_Wrapper.m_UIDemo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIDemoActions set) { return set.Get(); }
        public void SetCallbacks(IUIDemoActions instance)
        {
            if (m_Wrapper.m_UIDemoActionsCallbackInterface != null)
            {
                @AddScore.started -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddScore;
                @AddScore.performed -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddScore;
                @AddScore.canceled -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddScore;
                @AddCoin.started -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddCoin;
                @AddCoin.performed -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddCoin;
                @AddCoin.canceled -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnAddCoin;
                @TakeDamage.started -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnTakeDamage;
                @TakeDamage.performed -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnTakeDamage;
                @TakeDamage.canceled -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnTakeDamage;
                @Heal.started -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnHeal;
                @Heal.performed -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnHeal;
                @Heal.canceled -= m_Wrapper.m_UIDemoActionsCallbackInterface.OnHeal;
            }
            m_Wrapper.m_UIDemoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddScore.started += instance.OnAddScore;
                @AddScore.performed += instance.OnAddScore;
                @AddScore.canceled += instance.OnAddScore;
                @AddCoin.started += instance.OnAddCoin;
                @AddCoin.performed += instance.OnAddCoin;
                @AddCoin.canceled += instance.OnAddCoin;
                @TakeDamage.started += instance.OnTakeDamage;
                @TakeDamage.performed += instance.OnTakeDamage;
                @TakeDamage.canceled += instance.OnTakeDamage;
                @Heal.started += instance.OnHeal;
                @Heal.performed += instance.OnHeal;
                @Heal.canceled += instance.OnHeal;
            }
        }
    }
    public UIDemoActions @UIDemo => new UIDemoActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IUIDemoActions
    {
        void OnAddScore(InputAction.CallbackContext context);
        void OnAddCoin(InputAction.CallbackContext context);
        void OnTakeDamage(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
    }
} 